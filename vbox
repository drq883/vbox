#!/usr/bin/perl

use Getopt::Long;
use File::Basename;

$ME = basename($0);

$verbose = 0;
GetOptions(
   "help|\?" => sub { usage(); exit 0; },
   "verbose" => \$verbose,
);

$ENV{'PATH'} = "/usr/local/bin:/usr/bin:$ENV{'PATH'}";

# simpler interface to VBoxManage
#
# it will allow you to list, start, stop, and create snapshots
# of vms defined to VirtualBox

$hline = "
===============================================================================
";
chomp($bin = `which VBoxManage`);
if (! -x "$bin") {
  print <<NOBIN;

Can't find VBoxManage binary.

Your current PATH is:
  $ENV{PATH}

NOBIN
  exit 1;
}
printf "Using VBoxManage version: %s", `$bin -v`;

%vindex = %vuuid = %vname = %vrunning = ();
%sindex = %suuid = %sname = ();

# commands supported by controlVM, the key is what the short command
# is and the value is what the VBoxManage controlvm expects.
%cntlCmd = (
  off => 'poweroff',
  stop => 'acpipowerbutton',
  pause => 'pause',
  resume => 'resume',
);

# just loop asking what to do
$loop = 1;
while ($loop) {
   # if we have a command line argument, populate the VMs only since
   # we don't care to display. We will ignore a list as this point since we
   # do want to list the VMs in that case.
   # we will set $reply to a join of the args and let the current logic take
   # care of things. We will set a flag so that the loop ends.
   if ( $ARGV[0] && $ARGV[0] !~ /^l/i) {
      populateVMs();
      $reply = join(' ', @ARGV);
      $loop = 0;
   }
   else {
      print $hline;
      listVMs();
      exit 0 if ($ARGV[0] && $ARGV[0] =~ /^l/i);
      $msg = "
action [HELP,   DESTROY, Headless, Info,  PAuse, POweroff, RESTArt,
        RESUme, REVert,  SNapshot, STArt, STOp,  Take]:
(or 'q' to quit): ";
      print $msg;
      chomp($reply = <STDIN>);
      print "\n";
   }

   # help for VM list
   if ($reply =~ /^help/i) {
      print <<HELP;
Supported Actions:

  HELP|?             - Show this display
  DESTROY <n>        - Destroy the given VM and storage
  Headless <n[,n]>   - Start the VM(s) in headless mode
  Info <n[,n]>       - Show all VM(s) info
  PAuse <n[,n]>      - Pause the VM(s)
  POweroff <n[,n]>   - Poweroff the given VM(s)
  RESTArt <n[,n]>    - Poweroff and start the VM(s)
  RESUme <n[,n]>     - Resume the VM(s)
  REVert <n[,n]>     - Poweroff, restore active snapshot, Start
  SNapshot|cd <n>    - Change to the snapshot menu for VM(s)
  STArt <n[,n]>      - Power on the VM(s)
  STOp <n[,n]>       - Send ACPI signal to VM(s)
  Take <n[,n]> <str> - Take a snapshot, use <str> to describe it

NOTES:

When specifying multiple VMs, separate by commas only, no spaces.
for examples:
  start 1,2,3
  take 1,2,3 My Initial snapshot

Press Enter to continue...
HELP
      chomp($eob = <STDIN>);
      next;
   }

   # quit?
   elsif ($reply =~ /^q/i) {
      last;
   }

   # list command
   elsif ($reply =~ /^l/i) {
      next;
   }

   # start command
   elsif ($reply =~ /^sta/i) {
      my ($command, $VMs) = split(/\s+/, $reply, 2);
      if (! $VMs) {
        print "ERROR: You must specify a VM with the $command command\n";
      }
      else {
         foreach $vm (split(/,+/, $VMs)) {
            startVM("start $vm", "");
         }
      }
   }

   # headless command
   elsif ($reply =~ /^h/i) {
      my ($command, $VMs) = split(/\s+/, $reply, 2);
      if (! $VMs) {
        print "ERROR: You must specify a VM with the $command command\n";
      }
      else {
         foreach $vm (split(/,+/, $VMs)) {
           startVM("headless $vm", "--type headless");
         }
      }
   }

   # info command
   elsif ($reply =~ /^i/i) {
      my ($command, $VMs) = split(/\s+/, $reply, 2);
      if (! $VMs) {
        print "ERROR: You must specify a VM with the $command command\n";
      }
      else {
         foreach $vm (split(/,+/, $VMs)) {
           infoVM($vm);
         }
      }
   }
   # stop command
   elsif ($reply =~ /^sto/i) {
      my ($command, $VMs) = split(/\s+/, $reply, 2);
      if (! $VMs) {
        print "ERROR: You must specify a VM with the $command command\n";
      }
      else {
         foreach $vm (split(/,+/, $VMs)) {
           controlVM("stop", $vm);
         }
      }
   }

   # pause command
   elsif ($reply =~ /^pa/i) {
      my ($command, $VMs) = split(/\s+/, $reply, 2);
      if (! $VMs) {
        print "ERROR: You must specify a VM with the $command command\n";
      }
      else {
         foreach $vm (split(/,+/, $VMs)) {
           controlVM("pause", $vm);
         }
      }
   }

   # resume command
   elsif ($reply =~ /^resu/i) {
      my ($command, $VMs) = split(/\s+/, $reply, 2);
      if (! $VMs) {
        print "ERROR: You must specify a VM with the $command command\n";
      }
      else {
         foreach $vm (split(/,+/, $VMs)) {
           controlVM("resume", $vm);
         }
      }
   }

   # poweroff command
   elsif ($reply =~ /^po/i) {
      my ($command, $VMs) = split(/\s+/, $reply, 2);
      if (! $VMs) {
        print "ERROR: You must specify a VM with the $command command\n";
      }
      else {
         foreach $vm (split(/,+/, $VMs)) {
           controlVM("off", $vm);
         }
      }
   }

   # revert command (stop/revert/start if started)
   elsif ($reply =~ /^rev/i) {
      my ($command, $VMs) = split(/\s+/, $reply, 2);
      my $startit;
      my $in;
      my $headless = undef;
      chomp(my $running = `$bin list runningvms`);
      foreach $vm (split(/[,\s]+/, $VMs)) {
        $in = findIndex($vm);
        $startit = 0;
        if ($running =~ /$vindex{$in}{UUID}/) {
           # save off if we need to start headless or not
           chomp($headless = `$bin showvminfo $vindex{$in}{UUID} | grep -e 'Session name:' -e 'Session type:' | grep headless`);
           controlVM("off", $vm);
           $startit = 1;
        }
        system("$bin snapshot $vindex{$in}{UUID} restorecurrent\n");
        if ($startit) {
           if ($headless) {
             startVM("start $vm", "--type headless");
           }
           else {
             startVM("start $vm", "");
           }
        }
      }
   }

   # take a snapshot of one or more VMs
   elsif ($reply =~ /^t/i) {
      my ($command, $VMs, $name) = split(/\s+/, $reply, 3);
      my $in;
      chomp(my $running = `$bin list runningvms`);
      foreach $vm (split(/,+/, $VMs)) {
        $in = findIndex($vm);
        $live = "";
        if ($running =~ /$vindex{$in}{UUID}/) {
           $live = "--live";
        }
        system("$bin snapshot $vindex{$in}{UUID} take \"$name\" $live\n");
      }
   }

   # snapshot command
   elsif ($reply =~ /^(sn|cd)/i) {
      snapshotVM($reply);
   }

   # ssh command
   elsif ($reply =~ /^ss/i) {
      my ($command, $vm, $args) = split(/\s+/, $reply, 3);
      my $in = findIndex($vm);
      print "-------- 8< ------ output from ssh ---------------------------------------------\n";
      system("ssh $vindex{$in}{NAME} $args");
      print "-------------------------------------------------------------------- >8 --------\n\n";
   }

   # destroy command
   elsif ($reply =~ /^destroy/i) {
      destroyVM($reply);
   }

   # unknown command
   else {
      print "Unrecognized command '$reply'\n";
   }
}

exit 0;

# get vms and create indeces
#
# output for each vm looks like this:
#
#  "FreeBSD 6.3" {fc4d64b7-f516-48ec-b0cf-5a72aca43724}
#
sub populateVMs() {
   chomp(@vms = `$bin list vms`);
   chomp(@run = `$bin list runningvms`);
   $mach = 1;
   # reset all hashes
   %vindex = %vuuid = %vname = %vrunning = ();
   foreach $v (@vms) {
      $v =~ m/"(.+)" \{(.+)\}/;
      $vindex{$mach}{NAME} = $1;
      $vindex{$mach}{UUID} = $2;
      $vuuid{$2}{INDEX}    = $mach;
      $vuuid{$2}{NAME}     = $1;
      $vname{$1}{INDEX}    = $mach;
      $vname{$1}{UUID}     = $2;
      $mach++;
   }
   foreach $v (@run) {
      $v =~ m/"(.+)" \{(.+)\}/;
      $vrunning{$2} = 1;
   }
}

# print list of all VMs on the term
sub listVMs() {
   # re-populate hashes each time we're called to take into account
   # that a host may have been started or stopped between lists
   populateVMs();
   foreach $key (sort {$a <=> $b} keys %vindex) {
      $stat = "";
      if (defined $vrunning{$vindex{$key}{UUID}}) {
         $stat = "*";
      }
      else {
         $stat = "";
      }
      if ($verbose) {
         printf "%2d - %-25s {%s} %s\n",
            $key, $vindex{$key}{NAME}, $vindex{$key}{UUID}, $stat;
      }
      else {
         printf "%2d - %s %s\n",
            $key, $vindex{$key}{NAME}, $stat;
      }
   }
   print "\n * - running\n";
   return;
}

# get snapshots for a VM and create index
#
# output for each vm looks like this:
#
#    Name: No OS (UUID: 08e1be32-e22b-4b68-90ee-f740bb7371a5)
#     Name: 8.2-RELEASE (UUID: 6bc414d8-c1c5-4fbd-8f04-d7eb7c935fb3)
#        Name: sasdrq added (UUID: 2e6a9d6f-4078-4b99-8926-95c189536dc4)
#           Name: VM in a VM (UUID: 6e03d8f6-9759-4a0f-a756-2d913090e1ec)
#           Name: created CVS/ in /usr/local/src (UUID: 3d8897b5-767c-4205-b649-8ca065c69e36)
#              Name: packages added (UUID: 099cbd03-7b58-468c-bf11-9d74e30efbbb)
#                 Name: linux enabled (UUID: fa98510e-3c00-4db7-96cf-a613eaa7705c)
#        Name: hostname: bb01lgn95 (UUID: 845cedcb-9ebb-46c0-92a2-23b5faa4a263)
#           Name: ./bbsetup (UUID: 41bf07b1-73d4-4111-90ff-4eb8a02124ec) *
#
# new format:
#
# SnapshotName="No OS"
# SnapshotUUID="a584b0f5-d145-4895-8247-6888a07bf3da"
# SnapshotDescription="VM before any installation"
# SnapshotName-1="Changed type,network,video memory"
# ...
# SnapshotName-1-1-1-1-1-1="task defined, ready to change name"
# SnapshotUUID-1-1-1-1-1-1="7da38a69-5344-4cad-b312-e0b22a4f53ad"
# SnapshotDescription-1-1-1-1-1-1="/Users/root/runme.ps1 will
# break apart SystemProductName and save files.
# set hostname
# enable network
# touch done file
# reboot.
#
# let's change hostname to xxxxx and try"
# SnapshotName-1-1-1-1-1-1-1="This should be it"
# SnapshotUUID-1-1-1-1-1-1-1="d1f637d3-ad68-488e-aadd-e1dfdecfec03"
# ...
#
#
# active snapshot has the '*'
#
sub listSnaps($) {
   my $index = $_[0];
   chomp(@output = `$bin snapshot $vindex{$index}{UUID} list --machinereadable 2>/dev/null`);
   @snapshots = grep(/^Snapshot(Name|UUID)/, @output);
   ($current) = grep(/^CurrentSnapshotNode=/, @output);
   (undef, $currentNode) = split('="', $current);
   chop($currentNode);
   my $snap = 1;
   print "VM: $vindex{$index}{NAME}\n\n";
   # reset hashes
   %sindex = %suuid = %sname = ();
   if (scalar @snapshots == 0) {
      printf "There are currently no snapshots available\n";
   }
   else {
      $name = undef;
      # Snapshots look like this as of 4.2.12:
      #
      # 'SnapshotName="InitialCreate"'
      # 'SnapshotUUID="2d523cd4-a31f-48d2-9b3a-a98ce8a7cd8c"'
      # 'SnapshotName-1="added user toor"'
      # 'SnapshotUUID-1="f1b7e67f-b562-46ef-b8dc-d64013abbba6"'
      foreach $s (@snapshots) {
         ($varAndSuffix, $val) = split('="', $s);
         ($var, $branch) = split('-', $varAndSuffix, 2);
         chop($val);
         if ($var eq "SnapshotName") {
            $snapshotName = $varAndSuffix;
            $name = $val;
            next;
         }
         # if it's not Name, it has to be UUID
         $uuid = $val;
         ($dashes = $varAndSuffix) =~ s/[^-]//g;
         $indent = ' ' x (length($dashes) * 2);
         $sindex{$snap}{NAME} = $name;
         $sindex{$snap}{UUID} = $uuid;
         $suuid{$uuid}{INDEX}    = $snap;
         $suuid{$uuid}{NAME}     = $name;
         $sname{$name}{INDEX}    = $snap;
         $sname{$name}{UUID}     = $uuid;
         $currentFlag = '';
         if ($snapshotName eq $currentNode) {
            $currentFlag = '*';
         }
         if ($verbose) {
            printf "%2d %s %s %s %s %s\n", $snap, $indent, $name, $uuid, $currentFlag;
         }
         else {
            printf "%2d %s %s %s %s %s\n", $snap, $indent, $name, $currentFlag;
         }
         $snap++;
      }
      print "\n * - active snapshot\n";
   }
}

# given a number, name, or uuid, return the index from
# the vindex hash or undef
sub findIndex($) {
   my ($token) = @_;
   # is it an index?
   if (defined $vindex{$token}) {
      return $token;
   }
   # uuid?
   if (defined $vuuid{$token}) {
      return($vuuid{$token}{INDEX});
   }
   # name?
   if (defined $vname{$token}) {
      return($vname{$token}{INDEX});
   }
   return undef;
}

# prompt for which VM to process
# used by controlVM, startVM, etc.
# RETURNS: index of VM (or null)
sub promptForVM() {
   my $whichone, $index;
   # just loop until we get valid input
   while (! $whichone) {
      listVMs();
      print "\nWhich one to process? Choose a number (or 'q' to quit): ";
      chomp($whichone = <STDIN>);
      if ($whichone =~ /^q/i) {
         return undef;
      }
      if (! ($index = findIndex($whichone))) {
         print "\nInvalid input '$whichone', try again\n";
         next;
      }
   }
   return $index;
}

# given a number, name, or uuid, return the index from
# the sindex hash or undef
sub findIndexSnap($) {
   my ($token) = @_;
   # is it an index?
   if (defined $sindex{$token}) {
      return $token;
   }
   # uuid?
   if (defined $suuid{$token}) {
      return($suuid{$token}{INDEX});
   }
   # name?
   if (defined $sname{$token}) {
      return($sname{$token}{INDEX});
   }
   return undef;
}

# prompt for which Snap to process
# used by snapshotVM
# RETURNS: index of Snapshot (or null)
sub promptForSnap($) {
   my $vm = $_[0];
   my $whichone, $index;
   # just loop until we get valid input
   while (! $whichone) {
      listSnaps($vm);
      print "\nWhich one to process? Choose a number (or 'q' to quit): ";
      chomp($whichone = <STDIN>);
      if ($whichone =~ /^q/i) {
         return undef;
      }
      if (! ($index = findIndexSnap($whichone))) {
         print "\nInvalid input '$whichone', try again\n";
         next;
      }
   }
   return $index;
}

# start a VM
sub startVM($$) {
   my ($command, $whichone) = split(/\s+/, $_[0], 2);
   my $option = $_[1];
   my $index;
   while (! $whichone) {
      $whichone = promptForVM();
      return if (! $whichone);
   }
   $index = findIndex($whichone);
   printf "\uStarting VM %d\n", $index;
   system("$bin startvm $option $vindex{$index}{UUID}\n");
   sleep(3);
}

# determine what state a VM is currently in
# returns off,on,pause
sub VMState($) {
   my $v = $vindex{$_[0]}{UUID};
   chomp(my $out = `$bin showvminfo $v --machinereadable |grep '^VMState='`);
   if ($out =~ /(running|starting|stopping)/) {
     return "on";
   }
   if ($out =~ /paused/i) {
     return "pause";
   }
   return "off"
}

# control a VM. Supports the following commands:
#
# stop   -> "press the power button" and let ACPI poweroff normally
# off    -> "poweroff" the machine (pulled the power)
# pause  -> "pause" the machine
# resume -> "resume" the machine
#
sub controlVM($$) {
   my ($command, $whichone) = @_;
   if (! $cntlCmd{$command}) {
     print "Invalid command: $command given to controlVM()\n";
     return;
   }
   my $cntl  = $cntlCmd{$command};
   my $index;
   while (! $whichone) {
      $whichone = promptForVM();
      return if (! $whichone);
   }
   $index = findIndex($whichone);
   # check $state against $cntl and allow or deny
   my $state = VMState($index);
   if ($command eq $state
   ||  ($command eq "resume" && $state ne "pause")
   ||  ($command eq "pause" && $state ne "on")
   ||  ($command =~ /(off|stop)/ && $state ne "on")
   ) {
      print "Unable to issue $cntl at this point\n";
      return;
   }
   printf "\usend $cntl to VM %d\n", $index;
   system("$bin controlvm $vindex{$index}{UUID} $cntl\n");
   sleep(1);
}

# VBoxManage snapshot <uuid>|<name>
#                        take <name> [--description <desc>] [--pause] |
#                        delete <uuid>|<name> |
#                        restore <uuid>|<name> |
#                        restorecurrent |
#                        edit <uuid>|<name>|--current
#                           [--name <name>]
#                           [--description <desc>] |
#                        list [--details|--machinereadable]
#                        showvminfo <uuid>|<name>

# manage a VM (snapshots, maybe other stuff)
sub snapshotVM($$) {
   my ($command, $whichone) = split(/\s+/, $_[0], 2);
   my $vm;
   my $action;
   while (! $whichone) {
      $whichone = promptForVM();
      return if (! $whichone);
   }
   $vm = findIndex($whichone);
W1: while (true) {
      listSnaps($vm);
      $msg = "
action [HELP,    Del,    Headless, Info,  PAuse, POweroff, RESTArt,
        RESTOre, RESUme, REVert,   STArt, STOp,  Take]\n";
      if ($loop) {
        $msg .= "(or 'q' to return, 'Q' to exit): ";
      }
      else {
        $msg .= "(or 'q' to exit): ";
      }
      print "$msg";
      chomp($reply = <STDIN>);
      print "\n";

      # help for Snapshop list
      if ($reply =~ /^(help|\?)/i) {
         print <<HELP;
Supported Actions:

  HELP|?      - Show this display
  Delete <n>  - Delete the given snapshot
  Headless    - Start the VM in headless mode
  Info        - Show all VM info
  PAuse       - Pause the VM
  POweroff    - poweroff the given VM
  RESTArt     - Poweroff and start the VM
  RESTore <n> - Restore the given snapshot
  RESUme      - Resume the VM
  REVert      - Poweroff, restore active snapshot, Start
  STArt       - Power on the VM
  STOp        - Send ACPI signal to VM
  Take <str>  - Take a snapshot, use <str> to describe it

NOTES:
1 - only works if using bridged NIC and hostname matches VM name

Press Enter to continue...
HELP
         chomp($eob = <STDIN>);
         next;
      }

      # quit to quit this menu, Quit to quit vbox
      elsif ($reply =~ /^q/i) {
         if ($reply =~ /^Q/) {
            exit 0;
         }
         else {
            last;
         }
      }

      # start command
      elsif ($reply =~ /^sta/i) {
         startVM("start $vm", "");
      }

      # headless command
      elsif ($reply =~ /^h/i) {
         startVM("headless $vm", "--type headless");
      }

      # info command
      elsif ($reply =~ /^i/i) {
         infoVM($vm);
      }

      # stop command
      # we know that the UUID is so we don't need any more information
      elsif ($reply =~ /^sto/i) {
         controlVM("stop", $vm);
      }

      # pause command
      elsif ($reply =~ /^pa/i) {
         controlVM("pause", $vm);
      }

      # resume command
      elsif ($reply =~ /^resu/i) {
         controlVM("resume", $vm);
      }

      # poweroff command
      elsif ($reply =~ /^po/i) {
         controlVM("off", $vm);
      }

      # list command
      elsif ($reply =~ /^l/i) {
         next;
      }

      # delete command
      elsif ($reply =~ /^del/i) {
         my ($command, $whichone) = split(/\s+/, $reply, 2);
         while (! $whichone) {
            $whichone = promptForSnap($vm);
            next W1 if (! $whichone);
         }
         $snapshot = findIndexSnap($whichone);
         if (defined $sindex{$snapshot}) {
            system("$bin snapshot $vindex{$vm}{UUID} delete $sindex{$snapshot}{UUID}\n");
            sleep(1);
         }
         else {
            print "\nbad index given\n";
         }
      }

      # take command
      elsif ($reply =~ /^t/i) {
         my ($command, $name) = split(/\s+/, $reply, 2);
         if (! $name) {
            $name = "snapshot.$$";
            print "default name of $name used\n";
         }
         system("$bin snapshot $vindex{$vm}{UUID} take '$name'\n");
         sleep(1);
      }

      # restore command
      elsif ($reply =~ /^resto/i) {
         my ($command, $whichone) = split(/\s+/, $reply, 2);
         while (! $whichone) {
            $whichone = promptForSnap($vm);
            next W1 if (! $whichone);
         }
         $snapshot = findIndexSnap($whichone);
         if (defined $sindex{$snapshot}) {
            system("$bin snapshot $vindex{$vm}{UUID} restore $sindex{$snapshot}{UUID}\n");
            sleep(1);
         }
         else {
            print "\nbad index given\n";
         }
      }

      # revert command, no other input required here
      #
      # poweroff machine if down (and flag as running)
      # revert to current snapshot
      # restart machine if it was running
      elsif ($reply =~ /^rev/i) {
         my $startit = 0;
         chomp(my $running = `$bin list runningvms`);
         if ($running =~ /$vindex{$vm}{UUID}/) {
            # save off if we need to start headless or not
            chomp($headless = `$bin showvminfo $vindex{$vm}{UUID} | grep -e 'Session name:' -e 'Session type:'| grep headless`);
            controlVM("off", $vm);
            $startit = 1;
         }
         system("$bin snapshot $vindex{$vm}{UUID} restorecurrent\n");
         if ($startit) {
           if ($headless) {
             startVM("start $vm", "--type headless");
           }
           else {
            startVM("start $vm", "");
           }
         }
         sleep(1);
      }

      elsif ($reply =~ /^resta/i) {
         controlVM("off", $vm);
         until (`$bin showvminfo $vindex{$vm}{UUID} | grep State 2>/dev/null` =~ /powered off/) {
            sleep(2);
         }
         startVM("start $vm", "");
      }

      elsif ($reply =~ /^ss/i) {
         my ($command, $args) = split(/\s+/, $reply, 2);
         print "-------- 8< ------ output from ssh ---------------------------------------------\n";
         system("ssh $vindex{$vm}{NAME} $args");
         print "-------------------------------------------------------------------- >8 --------\n\n";
      }

      else {
         print "Unrecognized command '$reply'\n";
      }
   }
}

# destroy a VM
sub destroyVM($$) {
   my ($command, $whichone) = split(/\s+/, $_[0], 2);
   my $option = $_[1];
   my $index;
   while (! $whichone) {
      $whichone = promptForVM();
      return if (! $whichone);
   }
   $index = findIndex($whichone);
   printf "\uDestroying VM %s\n", $vindex{$index}{NAME};
   system("$bin unregistervm $vindex{$index}{UUID} --delete\n");
   sleep(3);
}

sub usage() {
   print <<EOU;

$ME - command-line interface to control VirtualBox VMs

Syntax:

   $ME [-h|-?] [-v] [<action> <vm>]

Where:

   -h or -?   - display usage information
   -v         - display UUID information for VMs and snapshots
   <action>   - perform action on <vm> directly without prompting for
                an action.
   <vm>       - describes to <action> the <vm> to control

Available actions from command line:

   STArt <vm>    - start specified vm
   STOp  <vm>    - send ACPI shutdown signal to  specified vm
   Headless <vm> - start specified vm headless
   Poweroff <vm> - power off specified vm
   Revert <vm>   - revert specified vm to last saved snapshot
                   (will reboot VM if running)
   DESTROY <vm>  - delete the specified vm and remove vm directory

EOU
}

# print info about a VM
sub infoVM($) {
  my ($whichone) = @_;
  my $index;
  while (! $whichone) {
    $whichone = promptForVM();
    return if (! $whichone);
  }
  $index = findIndex($whichone);
  print "-- 8< ----------------- VM Info ----------------------------------\n" if ($loop);
  print "Index:           $index\n";
  system("$bin showvminfo $vindex{$index}{UUID} | grep -e ^Name -e '^Guest OS' -e '^Memory' -e '^Number of' -e '^IDE' -e '^NIC 1' -e 'Created with' | sed -e 's/(UUID: .*)//'");
  print "------------------------------------------------------------ >8 --\n" if ($loop);
  print "Press Enter to continue..." if ($loop);
  chomp($eob = <STDIN>) if ($loop);
}
